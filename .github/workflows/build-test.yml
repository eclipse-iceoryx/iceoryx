# This workflow builds & runs test cases in iceoryx

name: Build & Test

# Triggers the workflow on push or pull request events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, release* ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds & runs iceoryx tests in ubuntu-18.04
  iceoryx-ubuntu:
     runs-on: ubuntu-18.04

     # Steps represent a sequence of tasks that will be executed as part of the job
     steps:
       - name: compiler versions
         run: |
          echo $(gcc --version)
          echo $(clang --version)

       - name: Install iceoryx dependencies
         # Softwares installed in ubuntu-18.04 instance
         # https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md
         run: |
          sudo apt-get update
          sudo apt-get install -y libacl1-dev libncurses5-dev bison

       - name: Checkout
         uses: actions/checkout@v2

       - name: Build sources
         run: |
            sudo $GITHUB_WORKSPACE/tools/add_test_users.sh
            $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh build-strict build-all out-of-tree build-shared test-add-user

       - name: Build debian package
         run: |
            $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh package

       - name: Run all tests
         run: |
           cd $GITHUB_WORKSPACE/build
           tools/run_tests.sh all

       - name: Build RouDi examples without TOML support
         run: |
           $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh out-of-tree examples toml-config-off clean

 # This job builds & runs iceoryx tests in macos-10.14
  iceoryx-macos:
    runs-on: macos-10.14
    # Softwares installed in macos-latest instance
    # https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.14-Readme.md

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: compiler version
        run: |
          echo $(clang --version)

      - name: Build and install dependencies
      # tinfo library which is required by iceoryx_introspection isn't available in mac
        run: |
          brew install ncurses
          cd $GITHUB_WORKSPACE
          mkdir -p bison_build
          cd bison_build
          wget https://ftp.gnu.org/gnu/bison/bison-3.5.1.tar.gz
          tar -xvf bison-3.5.1.tar.gz
          cd bison-3.5.1
          ./configure
          make
          sudo make install

      - name: Build sources
        run: |
          export LDFLAGS="-L/usr/local/opt/ncurses/lib"
          export CFLAGS="-I/usr/local/opt/ncurses/include"
          $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh build-strict build-all out-of-tree

      - name: Run tests, excluding timing_tests
        run: |
          cd $GITHUB_WORKSPACE/build
          make all_tests

      - name: Build RouDi examples without TOML support
        run: |
          $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh out-of-tree examples toml-config-off clean

 # This job builds & runs iceoryx tests in Windows 2019
  iceoryx-windows:
    runs-on: windows-2019
    # Softwares installed in windows instance
    # https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md

    steps:
      - name : Checkout
        uses: actions/checkout@v2

      - name: Build sources
        run: |
          cmake -Bbuild -Hiceoryx_meta -DBUILD_TEST=ON -DINTROSPECTION=OFF -DBINDING_C=ON -DEXAMPLES=ON -DCMAKE_CXX_FLAGS="/MP" && cmake --build build

      # until the windows support is fully implemented and we can use the windows cmake targets
      # we have to exclude the tests explicitly until everyone is running
      - name: Run tests, excluding timing_tests
        run: |
          build\hoofs\test\Debug\hoofs_moduletests.exe --gtest_filter="-*TimingTest*"
          build\hoofs\test\Debug\hoofs_integrationtests.exe
          build\binding_c\test\Debug\binding_c_moduletests.exe --gtest_filter="-Chunk*:iox_listener*:iox_node*:iox_pub*:BindingC_Runtime*:iox_sub*:iox_ws*:iox_types*:*TimingTest*"
          build\posh\test\Debug\posh_moduletests.exe --gtest_filter="-PoshRuntime*:IceoryxRoudiApp*:IceoryxRoudiMemoryManager*:PortManager*:ProcessIntrospection*:ProcessManager*:PosixShmMemoryProvider*:Process_test*:ParseAllMalformedInput*:*TimingTest*"
