// Copyright (c) 2022 Apex.AI Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#include "iceoryx_posh/popo/listener.hpp"
#include "iceoryx_posh/popo/untyped_client.hpp"
#include "iceoryx_posh/popo/untyped_server.hpp"
#include "iceoryx_posh/popo/user_trigger.hpp"
#include "iceoryx_posh/popo/wait_set.hpp"
#include "iceoryx_posh/runtime/service_discovery.hpp"

#include <fstream>
#include <iostream>
#include <string>
#include <utility>

int main()
{
    std::ofstream file(IOX_BINDING_C_STORAGE_SIZE_FILE_PATH);
    if (!file.is_open())
    {
        std::cout << "Could not open '" << IOX_BINDING_C_STORAGE_SIZE_FILE_PATH << "'" << std::endl;
        return EXIT_FAILURE;
    }

    file << "// This file is auto-generated!" << std::endl;
    file << "// Do not edit this file!" << std::endl;
    file << "// Adjust 'storage_size_generator.cpp' instead!" << std::endl;
    file << std::endl;
    file << "#ifndef IOX_BINDING_C_STORAGE_SIZES_HPP" << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_SIZES_HPP" << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_WAIT_SET_SIZE " << sizeof(iox::popo::WaitSet<>) << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_WAIT_SET_ALIGNMENT " << alignof(iox::popo::WaitSet<>) << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_LISTENER_SIZE " << sizeof(iox::popo::Listener) << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_LISTENER_ALIGNMENT " << alignof(iox::popo::Listener) << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_USER_TRIGGER_SIZE " << sizeof(iox::popo::UserTrigger) << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_USER_TRIGGER_ALIGNMENT " << alignof(iox::popo::UserTrigger) << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_UNTYPED_CLIENT_SIZE " << sizeof(iox::popo::UntypedClient) << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_UNTYPED_CLIENT_ALIGNMENT " << alignof(iox::popo::UntypedClient) << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_UNTYPED_SERVER_SIZE " << sizeof(iox::popo::UntypedServer) << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_UNTYPED_SERVER_ALIGNMENT " << alignof(iox::popo::UntypedServer) << std::endl;
    file << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_SERVICE_DISCOVERY_SIZE " << sizeof(iox::runtime::ServiceDiscovery)
         << std::endl;
    file << "#define IOX_BINDING_C_STORAGE_SERVICE_DISCOVERY_ALIGNMENT " << alignof(iox::runtime::ServiceDiscovery)
         << std::endl;
    file << std::endl;
    file << "#endif // IOX_BINDING_C_STORAGE_SIZES_HPP" << std::endl;

    file.flush();
    file.close();
    return EXIT_SUCCESS;
}
